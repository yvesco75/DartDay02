// CAF√â-O-MATIC - Division Innovation Caf√©

// Mission : Cr√©er la fonction servirCafe(double quantiteCafe) qui g√©rera notre service de caf√© intelligent.

// Fonction main
void main() {
  // Exemple d'appel de la fonction
  servirCafe(1.795);
}

// Protocole de Service et de S√©curit√©
void servirCafe(double quantiteCafe) {
  // ‚úÖ Protocole de S√©curit√© : V√©rifier les limites (minimum 0.1 tasse, maximum 10 tasses)
  if (quantiteCafe < 0.1 || quantiteCafe > 10) {
    print("‚ö†Ô∏è Erreur : La quantit√© doit √™tre comprise entre 0.1 et 10 tasses.");
    return;
  }

  // √âtape 1 : Arrondir √† la tasse standard la plus proche
  int tassesArrondies = quantiteCafe.round();

  // √âtape 2 : Convertir en millilitres
  int quantiteEnMl = tassesArrondies * 250;

  // √âtape 3 : Isoler parties enti√®re et d√©cimale
  int partieEntiere = quantiteCafe.floor();
  double partieDecimale = quantiteCafe - partieEntiere;

  // Affichage des d√©tails
  print('Service :');
  print('- Tasses arrondies : $tassesArrondies');
  print('- Quantit√© en millilitres : $quantiteEnMl ml');
  print('- Partie enti√®re : $partieEntiere tasse(s)');
  print('- Partie d√©cimale : ${partieDecimale.toStringAsFixed(2)}');

  // √âtape 4 : Afficher le niveau avec 2 d√©cimales
  print('${quantiteCafe.toStringAsFixed(2)} tasses restantes');

  // ‚úÖ Protocole de S√©curit√© : G√©n√©rer un message personnalis√© selon la quantit√©
  print(genererMessage(quantiteCafe));
}

// ‚úÖ Fonction pour g√©n√©rer un message personnalis√© selon la quantit√©
String genererMessage(double quantite) {
  if (quantite < 1) {
    return "‚òï Une petite tasse pour bien commencer.";
  } else if (quantite <= 5) {
    return "‚òï‚òï Profitez de votre caf√© !";
  } else {
    return "üî• Pr√©parez-vous pour un caf√© intense !";
  }
}

// ‚úÖ Fonction pour comparer deux commandes avec une tol√©rance de 0.05 tasse
bool comparerCommandes(double commande1, double commande2) {
  return (commande1 - commande2).abs() <= 0.05;
}
